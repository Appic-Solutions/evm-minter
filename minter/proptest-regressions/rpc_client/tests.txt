# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc bcf06754c6d5ea16d735b474ecba76ed5962d05c39ea2f05eb6c760a12f2e3eb # shrinks to blocks = (Block { number: 2_925_310_072_448_531_314_032_578_333_512_821_106_742_103_394_850_197_118_997_414_364_071_681_480_287, base_fee_per_gas: 98_156_620_378_820_234_382_429_425_123_884_258_565_633_231_229_835_421_551_077_574_642_473_535_872_567 }, Block { base_fee_per_gas: Nat(98156620378820234382429425123884258565633231229835421551077574642473535872567), number: Nat(2925310072448531314032578333512821106742103394850197118997414364071681480287), difficulty: Nat(0), extra_data: "", gas_limit: Nat(0), gas_used: Nat(0), hash: "\0\"å\u{e195d}\u{2}\0\u{1c1e4}'\0='�🕴.?./P\u{202e}]I", logs_bloom: "D{\u{10e4b4}\\\u{7456a}\u{7}\u{fcacd}d,\"J\u{125e}\u{1a38c}K\u{7bf2a}\u{104b54}w``$¥?p<Ѩ\u{544a1}[\u{57b9d}\u{7}", miner: "\u{e8bc0}4", mix_hash: "\u{7f}.\u{202e}", nonce: Nat(0), parent_hash: "g\"\0Ⱥ$\t\"\u{b390e}\u{d2cd8}\u{7f}\u{6feda}\u{577b3}\u{7f}\\$\u{7f}\u{64e7e}\u{97f7c}Ⱥj&\u{894c6}Ü%", receipts_root: "\u{feff}\u{602c7}㇖\u{bcff1}\u{66207}*\u{202e}\u{627fd}\u{f97bd}�\r3<\u{2}|}\\:𮗀\u{4aa92},=\u{6f10b}", sha3_uncles: "\u{37e92}%%\"\u{e70f9})\u{feff}\tIN\u{52030}v¥¥%=.\u{635bf}\u{7f}`", size: Nat(808076898385106223033937106504417186), state_root: "\u{464fd}ѨȺ\r�l?*\u{4}%c\u{2}2=𧐸\"@m*:cN\0\u{9c9d8}\t\u{5e8af}\u{aa2c4}𮈚\r", timestamp: Nat(35185409172511950102038755260006592748474158563479386048243290393923531855001), total_difficulty: Nat(81704845153011302947426168124136653786263305053722104973272729351114105791265), transactions: ["[&&/¥\u{ea78b}\u{40a66}\\&l&y/\tr\u{193db}\u{52b15}$", ""], transactions_root: Some("`𛉯9\u{a1ef4}®�%\rS\u{b023a}$\u{efb65}\u{a6c2e}{¥\u{202e}$\u{7f}\u{202e}\t"), uncles: ["'𰴢\r\u{db28c}\u{feff}.=\u{1}8\u{4bbe3}/\\Ⱥ?n7#", "\u{e936c}~\u{86b1e}:=/8🕴🕴\u{202e}`\u{8e}.\u{c0c13}\u{4566a}\u{202e}*", "{𑨍{/sKo\t", "j@\u{85868}]\u{1072f9}\r틋\u{897bd}Ⱥ.\u{b53c8}\0\u{5b570}\u{ae4d3}", "}\u{4ca53}\":.\r/Ѩ\u{7f}$i*𬪋9\u{8eb05}{\u{3ebc2}Ѩ|\u{1b}\u{fd9a4}SȺ\u{5ec6e}𐩥yx\0¥🕴"] }), first_error = JsonRpcError(JsonRpcError { code: 2955130553864590850, message: "Û/\u{feff}M\u{57f81}K𡢨*(K�'\u{b}\u{b5575}" }), second_error = ProviderError(NoPermission), third_error = HttpOutcallError(InvalidHttpJsonRpcResponse { status: 19691, body: ".:\u{b3915}\\$\u{bb0ea}\u{202e}=\r;ⰸ\u{aaae5}'\u{a192b}\t:<)\u{93188}\u{a2bb3}\u{c8725}\u{a2d8d}𡼥", parsing_error: None })
cc 63414873d464e17398f6539914f2b630ac3d4d7799d3fe58d36be93902ce03e4 # shrinks to transaction_receipts = (Some(TransactionReceipt { block_hash: 0xd5c3259ce253f9efe4d93fba5af2842813ee2fba73e0138ce200ffa1b99f05af, block_number: 53_050_757_078_441_138_352_491_112_557_498_420_520_256_419_116_593_368_349_249_230_492_139_091_287_263, effective_gas_price: 55_899_450_523_320_776_379_414_279_326_458_669_973_575_766_527_853_362_649_639_892_168_080_403_567_901, gas_used: 59_398_929_972_361_172_612_711_879_453_563_060_001_687_160_619_829_952_632_959_426_373_728_696_044_774, status: Failure, transaction_hash: 0xe6cb41ffb6acefffc37ae457f9be0b4746d1dfc00ecd33cd918d976b3eb662d3 }), Some(TransactionReceipt { block_hash: "0xd5c3259ce253f9efe4d93fba5af2842813ee2fba73e0138ce200ffa1b99f05af", block_number: Nat(53050757078441138352491112557498420520256419116593368349249230492139091287263), effective_gas_price: Nat(55899450523320776379414279326458669973575766527853362649639892168080403567901), gas_used: Nat(59398929972361172612711879453563060001687160619829952632959426373728696044774), status: Nat(0), transaction_hash: "0xe6cb41ffb6acefffc37ae457f9be0b4746d1dfc00ecd33cd918d976b3eb662d3", contract_address: None, from: "", logs: [LogEntry { address: "0x0000000000000000000000000000000000000000", topics: ["0x0000000000000000000000000000000000000000000000000000000000000000"], data: "0xcc7294eff06b375cb3948850687afdcd1d69ef20b7d6c2f6f371881c71cda75dcca065c288a7efec245d0a6e7b00c041b9bfb048fecd971f1fc6b9399d8f91105385c691a028905e06d81517d6213085a49b3d091b03b20cccd3c0d31b61c65a106fc5db1a14c8f99b78446e870e8f27105708be345e0d189fa7ed79513f9437ca7cc7465f9c5c83505722034a417901ccd7006bf4e5a50ed1efe63f1f8e9a1f4c3f6f308f66a5a041e3d973fa646b257f77f3299f08a3aa5af5395307fa7f58379b5422faa7dec4a9f2bce72e98e2736a2e487e", block_number: Some(Nat(65827513269140808126575426158271150306517642007117517015434007628058968338753)), transaction_hash: None, transaction_index: None, block_hash: None, log_index: None, removed: true }], logs_bloom: "%Ⱥ\u{1}#;f\u{d044e}\\\u{7}8I", to: "{j\t¥𫵓\u{aa52e}\u{94650}z\u{202e}E<Ñr\u{adb0c}\u{2}={\u{6f6b7}o{/%\u{3dfb8}\u{f8ebf}&", transaction_index: Nat(105384477986221103282478756574214223880571160662933627355356816707371699322596), type: "\\7Mn¥\"$e\u{e0703}" })), first_error = JsonRpcError(JsonRpcError { code: 8919088567586433302, message: "'\"&.¥I%\u{c6526}?\u{e9bf7}\u{d2743}\u{89}𓀂J%$H\\\u{202e}🕴`\u{9e}" }), second_error = ProviderError(MissingRequiredProvider), third_error = HttpOutcallError(InvalidHttpJsonRpcResponse { status: 6599, body: "\u{feff}\u{c50f0}Ѩ'\u{202e}\u{bf527}U�\u{51919}u\u{1921a}/\u{7ec1f}*\u{aebbc}Ѩ\u{d7ae3}`�(\"?\u{b}|\t\0𣤑�\u{74172}", parsing_error: None })
cc 3426f26e2ad4250a6b7e58a5fafb40b745828912ede141474b9fcdf8f3221c3f # shrinks to minter_logs = [LogEntry { address: 0x0000000000000000000000000000000000000000, topics: [0x0000000000000000000000000000000000000000000000000000000000000000], data: Data([0]), block_number: None, transaction_hash: None, transaction_index: Some(1948019687285697405868634767388130833), block_hash: Some(0xfcce67e530fff3a9dbd544cfb1d4657bff299a9abe97445367cbdb65708b8aae), log_index: Some(30_706_501_659_048_675_975_404_809_068_233_328_067_699_194_066_342_174_043_906_780_914_482_745_371_732), removed: false }], first_error = ValidationError(Custom("$g\u{107b32}\u{5ec2e}\u{b04a6}*\u{102358}¥\u{7f}=Ⱥ\0")), second_error = ProviderError(TooFewCycles { expected: 299898138051145215018712849975314779293, received: 311124834041664643753350347245157200799 }), third_error = JsonRpcError(JsonRpcError { code: -2626487353973031620, message: "@둩\\\0\u{d546e}" })
